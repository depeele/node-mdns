#!/usr/bin/env node
var Path        = require('path'),
    Mdns        = require('../lib/mdns'),
    Utils       = require('../lib/utils'),
    prog        = Path.basename(process.argv[1]),
    listen      = Mdns.Listen();

listen.on('listening', function(ainfo) {
    console.log('Awaiting mDNS responses on %s:%s...',
                ainfo.address, ainfo.port);
});

listen.on('error', function(e) {
    console.log('*** Error: %s', e);
});

listen.on('timeout', function() {
    console.log('*** timeout');
    process.exit(0);
});

listen.on('end', function() {
    console.log('complete');
});

listen.on('response', function(response, rinfo, raw, records) {
    var from    = [];
    if (Array.isArray(rinfo))
    {
        rinfo.forEach(function(ri) {
            var str = ri.address +':'+ ri.port;

            if (from.indexOf(str) < 0)
            {
                from.push( str );
            }
        });
    }
    else
    {
        from.push( rinfo.address +':'+ rinfo.port );

        rinfo    = [ rinfo ];
        response = [ response ];
        raw      = [ raw ];
    }

    /*
    console.log(  "========================================================\n"
                + "Response from %s: (%d records in %d responses)",
                from.join(', '), records.length, response.length);

    records.forEach(function(record, idex) {
        if (record.data)
        {
            if (record.code)
            {
                // OPT record
                console.log("%d: { \"code\": %d,\n"
                            + "  \"length\": %d,\n"
                            + "  \"data\": [ %s ]}",
                            idex,
                            record.code,
                            record.length,
                            Utils.buf2hex(record.data, {
                                noOffsets:      true,
                                prefixOctets:   true,
                                octetSeparator: ','
                            }));
            }
            else
            {
                // RAW data
                console.log("%d: { \"data\": [ %s ]}",
                            idex,
                            Utils.buf2hex(record.data, {
                                noOffsets:      true,
                                prefixOctets:   true,
                                octetSeparator: ','
                            }));
            }
        }
        else
        {
            console.log("%d: %s", idex, JSON.stringify(record, null, 2));
        }
    });
    //return;
    // */

    for (var idex = 0, len = response.length; idex < len; idex++)
    {
        var ri  = rinfo[ idex ],
            rsp = response[ idex ],
            dat = raw[ idex ];

        console.log(  "=====================================================\n"
                    + "Response from %s:%s: (%d bytes):\n"
                    + "%s",
                    ri.address, ri.port, dat.length,
                    rsp);

        /*
        console.log(  "-----------------------------------------------------\n"
                    + "raw data:\n%s",
                    Utils.buf2hex(dat, {octetsPer: 16, ascii: true}));
        // */
    }
});

var res = listen.begin();
if (res !== true)
{
    console.log("*** %s", res);
}

// vim: set filetype=javascript:
