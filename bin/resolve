#!/usr/bin/env node
var Path        = require('path'),
    Mdns        = require('../lib/mdns'),
    Utils       = require('../lib/utils'),
    prog        = Path.basename(process.argv[1]),
    argv        = process.argv.slice(2),
    argc        = argv.length,
    config      = {},
    request     = {
        question:   [],
        timeout:    undefined
    },
    types       = [ 'A' ];

/************************************************************************
 * Process arguments
 *
 */
for (var idex = 0; idex < argc; idex++)
{
    var arg = argv[idex];

    switch (arg)
    {
    case '-s':
    case '--server':
        var addr        = argv[++idex],
            withPort    = addr.match(/^([^:]+):([0-9]+)/),
            port        = null;
        if (withPort)
        {
            addr = withPort[0];
            port = withPort[1];
        }
        if (! config.server)    { config.server = {}; }

        config.server.address = addr;
        if (port)   { config.server.port = port; }
        break;

    case '-p':
    case '--port':
        if (! config.server)    { config.server = {}; }

        config.server.port = argv[++idex];
        break;

    case '-t':
    case '--type':
        types = argv[++idex].split(/\s*,\s*/);

        types.forEach(function(type, idex) {
            var val     = type;

            if (type.match(/^(0x[0-9a-f]+|0[0-7]+|[0-9]+)$/i))
            {
                val = parseInt(type);
                if (! Mdns.consts.type2str(val))
                {
                    val = null;
                }
            }
            else
            {
                val = Mdns.consts.str2type( type );
            }

            if (! val)
            {
                console.log(  "*** Invalid type '%s'\n"
                            + "***    Valid string  values:\n"
                            + "***     %j\n"
                            + "***\n"
                            + "***    Valid numeric values:\n"
                            + "***     %j",
                            type,
                            Object.keys(Mdns.consts.TYPE_STR),
                            Object.keys(Mdns.consts.TYPE_INT));

                process.exit(-1);
            }


            types[idex] = val;
        });
        break;

    case '--timeout':
        request.timeout = argv[++idex];
        break;

    case '-?':
    case '-h':
    case '--help':
        console.log(  "Usage: %s [options] quer(ies)\n"
                    + "     :     options:\n"
                    + "     :       -s server[:port] \n"
                    + "     :       -p port\n"
                    + "     :       -t query-type\n"
                    + "     :       --timeout secs\n",
                    prog);
        process.exit(0);
        break;

    default:
        types.forEach(function(type) {
            request.question.push( {qname: arg, qtype: type} );
        });
        break;
    }
}

/************************************************************************
 * Begin resolution
 *
 */
var client  = Mdns.Client( config )
                .on('listening', _onListening)
                .on('error',     _onError)
                .on('timeout',   _onTimeout)
                .on('end',       _onEnd)
                .on('response',  _onResponse);

/************************************************************************
 * Event handlers
 *
 */
function _onListening(ainfo) {
    console.log('Awaiting mDNS responses on %s:%s...',
                ainfo.address, ainfo.port);

    if (request.question.length > 0)
    {
        var req = client.resolve(request.question, request.timeout);
        if (req instanceof Error)
        {
            console.log("*** %s", req);
        }
    }
}

function _onError(e) {
    console.log('*** Error: %s', e);
    client.close();
}

function _onTimeout() {
    console.log('*** timeout');
    client.close();
    process.exit(0);
}

function _onEnd() {
    console.log('complete');
}

function _onResponse(response, rinfo, raw) {
    console.log(  "=====================================================\n"
                + "Response from %s:%s: (%d bytes):\n"
                + "%s",
                rinfo.address, rinfo.port, raw.length,
                response);

    /*
    console.log(  "-----------------------------------------------------\n"
                + "raw data:\n%s",
                Utils.buf2hex(raw, {octetsPer: 16, ascii: true}));
    // */

    if (client.isMdns !== true)
    {
        client.close();
        //delete client;
        //process.exit(0);
    }
}

// vim: set filetype=javascript:
