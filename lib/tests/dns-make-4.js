var Util    = require('util'),
    Utils   = require('../utils.js'),
    Message = require('../message.js'),

    expect  = [ // Header
                0x12, 0x34, 0x80, 0x80, 0x00, 0x01, 0x00, 0x03,
                0x00, 0x04, 0x00, 0x05,

                // Message
                0x04, 0x74, 0x65, 0x73, 0x74, 0x05, 0x6c, 0x6f,
                0x63, 0x61, 0x6c, 0x00, 0x01, 0x00, 0x01, 0xc0,
                0x0c, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x23, 0x0a, 0x68, 0x6f, 0x73, 0x74,
                0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xc0, 0x0c,
                0xc0, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
                0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0xc0, 0x0c,
                0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x0c, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
                0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0xc0, 0x0c,
                0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x09, 0x00, 0x0a, 0x04, 0x6d, 0x61, 0x69,
                0x6c, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x03,
                0x6e, 0x73, 0x31, 0xc0, 0x0c, 0xc0, 0x0c, 0x00,
                0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00,
                0x06, 0x03, 0x6e, 0x73, 0x32, 0xc0, 0x0c, 0xc0,
                0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x06, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x33, 0xc0,
                0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x07, 0x00, 0x06, 0x03, 0x6e, 0x73,
                0x34, 0xc0, 0x0c, 0xc0, 0x70, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x7f,
                0x00, 0x00, 0x01, 0xc0, 0x83, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x04, 0x7f,
                0x00, 0x00, 0x01, 0xc0, 0x95, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x7f,
                0x00, 0x00, 0x02, 0xc0, 0xa7, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x7f,
                0x00, 0x00, 0x03, 0xc0, 0xb9, 0x00, 0x01, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04, 0x7f,
                0x00, 0x00, 0x04
    ];

/*****************************************************************************
 * Creation test/pack
 *
 */
console.log("--------------------------------------------------------------");
var message = new Message( ),
    name    = 'test.local';

message.header.id      = 0x1234;
message.header.qr      = 1;
message.header.ra      = 1;         // authoritative
message.header.rd      = 0;

message.addQuestion(name, 1, 1);

message.header.anCount = 3;
message.header.nsCount = 4;
message.header.arCount = 5;

message.addRR('answer', name, 'SOA', 'IN', 1, {
    mname:      'hostmaster.'+ name,
    rname:      'hostmaster.'+ name,
    serial:     1,
    refresh:    2,
    retry:      3,
    expire:     4,
    minimum:    5
});
message.addRR('answer', name, 'TXT', 'IN', 2, {txt: ['Hello World']} );
message.addRR('answer', name, 'MX',  'IN', 3, {preference: 10, exchange: 'mail.'+ name});

message.addRR('authority', name, 'NS',  'IN', 4, {ns: 'ns1.'+ name});
message.addRR('authority', name, 'NS',  'IN', 5, {ns: 'ns2.'+ name});
message.addRR('authority', name, 'NS',  'IN', 6, {ns: 'ns3.'+ name});
message.addRR('authority', name, 'NS',  'IN', 7, {ns: 'ns4.'+ name});

message.addRR('additional', 'mail.'+ name, 'A', 'IN',  8, {a: '127.0.0.1'});
message.addRR('additional', 'ns1.'+ name,  'A', 'IN',  9, {a: '127.0.0.1'});
message.addRR('additional', 'ns2.'+ name,  'A', 'IN', 10, {a: '127.0.0.2'});
message.addRR('additional', 'ns3.'+ name,  'A', 'IN', 11, {a: '127.0.0.3'});
message.addRR('additional', 'ns4.'+ name,  'A', 'IN', 12, {a: '127.0.0.4'});


console.log("Generated message:\n%s", message);

//console.log("%s", Util.inspect(message, false, 20));

console.log("--------------------------------------------------------------");
var wBuf    = new Buffer( 4096 );

message.pack(wBuf);

console.log("Packed message (%d bytes):\n%s",
            message.produced, Utils.buf2hex(wBuf, {
                                            length:     message.produced,
                                            octetsPer:  16
                             }));
console.log(">>> Expect (%d bytes):\n%s",
            expect.length, Utils.buf2hex(expect, {octetsPer:16 }));

if (message.produced !== expect.length)
{
    console.log("*** Pack error: length %d != expected %d",
                message.produced, expect.length);
    process.exit(-1);
}

var diff    = 0;
for (var idex = 0, len = expect.length; idex < len; idex++)
{
    if (wBuf[idex] !== expect[idex])
    {
        diff++;
        console.log("*** Pack error: @ %s: %s != expected %s",
                    Utils.int2hex(idex, 2),
                    Utils.int2hex(wBuf[idex]),
                    Utils.int2hex(expect[idex]));

        if (diff > 8)   { break; }
    }
}

if (diff === 0)
{
    console.log(">>> packed buffer matches original source");
}
