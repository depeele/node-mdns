var Util    = require('util'),
    Utils   = require('../utils.js'),
    Message = require('../message.js'),

    data    = [
        /* Header       0x00 - 0x0b
         *  id= 2,  qr= 1, opcode= 0, aa= 1, tc= 0, rd= 1, ra= 1, z= 0
         *                      qdCount= 1, anCount= 3,
         *  nsCount= 6, arCount= 6
         */
        0x00, 0x02, 0x85, 0x80, 0x00, 0x01, 0x00, 0x03,     // 0x00 - 0x07
        0x00, 0x06, 0x00, 0x06,                             // 0x08 - 0x0b

        /* Question     0x0c - 0x23     (1 record)
         *
         * 1: 0x0c - 0x23
         *    popd.ix.netcom.com, qtype= 1, qclass= 1
         *
         *      -- added to label map --
         *      0x0c: popd.ix.netcom.com
         *      0x11:      ix.netcom.com
         *      0x14:         netcom.com
         *      0x1b:                com
         */
        0x04, 0x70, 0x6F, 0x70, 0x64, 0x02, 0x69, 0x78,     // 0x0c - 0x13
        0x06, 0x6E, 0x65, 0x74, 0x63, 0x6F, 0x6D, 0x03,     // 0x14 - 0x1b
        0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01,     // 0x1c - 0x23

        /* Answer       0x24 - 0x6a     (3 record)
         *
         * 1: 0x24 - 0x48
         *      popd.ix.netcom.com, type= 5, class= 1, ttl= 60
         *      rdata:  .popd.best.ix.netcom.com    (25 bytes)
         *
         *      -- added to label map --
         *      0x24: popd.ix.netcom.com
         *      0x30: popd.best.ix.netcom.com    (rdata)
         *      0x35:      best.ix.netcom.com    (rdata)
         */
        0xC0, 0x0C, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00,     // 0x24 - 0x2b
        0x00, 0x3C, 0x00, 0x19, 0x04, 0x70, 0x6F, 0x70,     // 0x2c - 0x33
        0x64, 0x04, 0x62, 0x65, 0x73, 0x74, 0x02, 0x69,     // 0x34 - 0x3b
        0x78, 0x06, 0x6E, 0x65, 0x74, 0x63, 0x6F, 0x6D,     // 0x3c - 0x43
        //                            2: 0x49 - 0x5a
        0x03, 0x63, 0x6F, 0x6D, 0x00, 0xC0, 0x30, 0x00,     // 0x44 - 0x4b
        0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,     // 0x4c - 0x53
        //                                        3: 0x5b - 0x6a
        0x06, 0x03, 0x69, 0x78, 0x36, 0xC0, 0x3A, 0xC0,     // 0x54 - 0x5b
        0x55, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x1C,     // 0x5c - 0x63
        0x20, 0x00, 0x04, 0xC7, 0xB6, 0x78, 0x06,           // 0x64 - 0x6a

        /* Authority    0x6b - 0xe2     (6 records)
         * 1: 0x6b - 0x7c
         */
        0xC0, 0x3A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,     // 0x6b - 0x72
        0x1C, 0x20, 0x00, 0x06, 0x03, 0x6E, 0x73, 0x31,     // 0x73 - 0x7a
                    // 2: 0x7d - 
        0xC0, 0x3A, 0xC0, 0x3A, 0x00, 0x02, 0x00, 0x01,     // 0x7b - 0x82
        0x00, 0x00, 0x1C, 0x20, 0x00, 0x06, 0x03, 0x6E,     // 0x83 - 0x8a
        0x73, 0x32, 0xC0, 0x3A, 0xC0, 0x3A, 0x00, 0x02,     // 0x8b - 0x92
        0x00, 0x01, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x06,     // 0x93 - 0x9a
        0x03, 0x6E, 0x73, 0x33, 0xC0, 0x3A, 0xC0, 0x3A,     // 0x9b - 0xa2
        0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x1C, 0x20,     // 0xa3 - 0xaa
        0x00, 0x06, 0x03, 0x6E, 0x73, 0x34, 0xC0, 0x3A,     // 0xab - 0xb2
        0xC0, 0x3A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,     // 0xb3 - 0xba
        0x1C, 0x20, 0x00, 0x0C, 0x09, 0x64, 0x66, 0x77,     // 0xbb - 0xc2
        0x2D, 0x69, 0x78, 0x6E, 0x73, 0x31, 0xC0, 0x3A,     // 0xc3 - 0xca
        0xC0, 0x3A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,     // 0xcb - 0xd2
        0x1C, 0x20, 0x00, 0x0C, 0x09, 0x64, 0x66, 0x77,     // 0xd3 - 0xda
        0x2D, 0x69, 0x78, 0x6E, 0x73, 0x32, 0xC0, 0x3A,     // 0xda - 0xe2

        /* Additional   0x3e -          (6 records)
         * 1: 0x3e - 
         */
        0xC0, 0x77, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xC7, 0xB6, 0x78, 0xCB,
        0xC0, 0x89, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xC7, 0xB6, 0x78, 0xCA,
        0xC0, 0x9B, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xC7, 0xB6, 0x78, 0x01,
        0xC0, 0xAD, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xC7, 0xB6, 0x78, 0x02,
        0xC0, 0xBF, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xCE, 0xD6, 0x62, 0x21,
        0xC0, 0xD7, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x1C, 0x20, 0x00, 0x04, 0xCE, 0xD6, 0x62, 0x22
    ];

/*****************************************************************************
 * Unpack test
 *
 */
console.log("--------------------------------------------------------------");
var rBuf    = new Buffer( data ),
    message = new Message( rBuf );

console.log("Unpack mesage from %d bytes of raw data:", message.consumed);
console.log("message:\n%s", Util.inspect(message, false, 20));

process.exit(0);

/*****************************************************************************
 * Pack test
 *
 */
console.log("--------------------------------------------------------------");
var wBuf    = new Buffer( 4096 );

message.pack(wBuf);

console.log("Packed message (%d bytes):\n%s",
            message.produced, Utils.buf2hex(wBuf, 0, message.produced, 32));

if (message.produced !== data.length)
{
    console.log("*** Pack error: length %d != expected %d",
                message.produced, data.length);
    process.exit(-1);
}

var same    = true;
for (var idex = 0, len = data.length; idex < len; idex++)
{
    if (wBuf[idex] !== data[idex])
    {
        same = false;
        console.log("*** Pack error: @ %d: %d != expected %d",
                    idex, wBuf[idex], data[idex]);
    }
}

if (same)
{
    console.log(">>> packed buffer matches original source");
}
